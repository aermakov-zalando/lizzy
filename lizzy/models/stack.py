from typing import Dict, Any, List, Optional  # NOQA  pylint: disable=unused-import

from datetime import datetime
from copy import deepcopy
import boto3
import botocore.exceptions

from lizzy.exceptions import ObjectNotFound
from ..apps.senza import Senza
from ..util import now, parse_date, timestamp_to_uct
from ..configuration import config

REMOVED_STACK = object()


def _make_stack_api_compliant(stack: dict):
    stack = deepcopy(stack)  # avoid bugs

    # Return time according to
    # http://zalando.github.io/restful-api-guidelines/data-formats/DataFormats.html#must-use-standard-date-and-time-formats
    creation_date = timestamp_to_uct(stack['creation_time'])
    stack['creation_time'] = '{:%FT%T%z}'.format(creation_date)

    # TODO check if all and only the parameters in the api are given

    return stack


class Stack():
    prefix = 'lizzy_stack'
    key = 'stack_id'
    search_properties = ['stack_id']

    def __init__(self, *,
                 stack_id: str=None,
                 creation_time: datetime=None,
                 keep_stacks: int,
                 image_version: str,
                 senza_yaml: str,
                 stack_name: str,
                 ami_image: Optional[str]=None,
                 stack_version: Optional[str]=None,
                 parameters: Optional[list]=None,
                 status: Optional[str]='LIZZY:NEW',
                 application_version: Optional[str]=None,
                 **kwargs):  # pylint: disable=unused-argument
        """
        Stack Model stored in Redis

        :param stack_id: Id of the stack used both in Lizzy and Cloud Formation (Generated by Lizzy)
        :param creation_time: Date and time of stack creation
        :param keep_stacks: How many old stacks to keep
        :param traffic: How much traffic to route to new stack
        :param image_version: Docker image version to deploy
        :param ami_image: Which AMI image to use
        :param senza_yaml: Senza definition
        :param stack_name: Name of the application
        :param stack_version: Stack Version (generated by Lizzy)
        :param parameters: Parameters to pass to Senza
        :param status: Stack Status
        :param application_version: Application version to be used in CF and Kio
        :param kwargs: Other parameters that are not recognized
        """
        self.stack_name = stack_name
        self.creation_time = parse_date(creation_time or now())
        self.image_version = image_version
        self.stack_version = (stack_version or
                              application_version)
        self.stack_id = stack_id if stack_id is not None else self.generate_id()  # type str
        self.ami_image = ami_image
        self.keep_stacks = keep_stacks
        self.senza_yaml = senza_yaml
        self.parameters = parameters or []  # type: list
        self.status = status  # status is cloud formation status or LIZZY_NEW
        self.application_version = application_version
        self.__cf_stack = None

    @classmethod
    def get(cls, stack_name: str, stack_version: str) -> Optional[dict]:
        # TODO return Stack object and convert to dict on api decorator.
        stacks = cls.list(stack_name, stack_version)
        if not stacks:
            raise ObjectNotFound('{}-{}'.format(stack_name, stack_version))
        else:
            return stacks[0]

    @classmethod
    def list(cls, *stack_ref: List[str]) -> List[dict]:
        """
        Returns a List of stack dicts compliant with the API spec.

        .. seealso:: lizzy/swagger/lizzy.yaml#/definitions/stack
        """

        senza = Senza(config.region)
        stacks = [_make_stack_api_compliant(stack)
                  for stack in senza.list(*stack_ref)]
        return stacks

    def generate_id(self) -> str:
        """
        The id will be the same as the stack name on aws
        """
        return '{name}-{version}'.format(name=self.stack_name,
                                         version=self.stack_version)

    @property
    def cf_stack(self) -> Dict[str, Any]:
        """
        Gets the Cloud Formation Stack
        """

        if self.__cf_stack is None:
            cloud_formation = boto3.client('cloudformation',
                                           region_name=config.region)
            try:
                stacks = cloud_formation.describe_stacks(StackName=self.stack_id)  # type: Dict[str, Any]
            except botocore.exceptions.ClientError:
                return {}
            self.__cf_stack = stacks['Stacks'][0]  # type: Dict[str, Any]

        return self.__cf_stack

    @property
    def cf_tags(self) -> Dict[str, str]:
        """
        Return a dict with cloud formation stacks
        """
        kv_tags = self.cf_stack.get('Tags', {})  # type: List[Dict[str, str]]
        # AWS returns tags in the form of [{'Key': 'KeyName', 'Value': 'KeyValue'}]
        tags = {tag['Key']: tag['Value'] for tag in kv_tags}
        return tags